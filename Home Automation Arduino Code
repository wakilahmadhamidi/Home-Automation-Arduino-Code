/*************************************************************
Project Title :   Home automation using blynk
Desinged By:  :   Wakil Ahmad Hamidi
Provided By   :   Emertxe Technologies
Description   :   To control light's brigntness with brightness,monitor temperature , monitor water level in the tank through blynk app
Pheripherals  :   Arduino UNO , Temperature system, LED, LDR module, Serial Tank, Blynk cloud, Blynk App.
 *************************************************************/

#define BLYNK_TEMPLATE_ID "TMPLGdJ_dl0L"
#define BLYNK_DEVICE_NAME "iPhone 13"
#define BLYNK_AUTH_TOKEN "8CUQ2R2Ow1jnmQFCU-1BB78W4OUIa1Bz"


// Comment this out to disable prints 
//#define BLYNK_PRINT Serial

#include <SPI.h>
#include <Ethernet.h>
#include <BlynkSimpleEthernet.h>
#include <Wire.h>
#include <LiquidCrystal_I2C.h>

#include "main.h"
#include "temperature_system.h"
#include "ldr.h"
#include "serial_tank.h"

char auth[] = BLYNK_AUTH_TOKEN;

BLYNK_WRITE(V8)
{
  int value = param.asInt();
  if (value)
  {
    digitalWrite(LED,1);
  }
  else
  {
    digitalWrite(LED,0);
  }
}  

bool heater_sw;
bool inlet_sw,outlet_sw;
unsigned int tank_volume;

BlynkTimer timer;

LiquidCrystal_I2C lcd(0x27, 16, 2); // set the LCD address to 0x27 for a 16 chars and 2 line display

// This function is called every time the Virtual Pin 0 state changes
/*To turn ON and OFF cooler based virtual PIN value*/ 
    
BLYNK_WRITE(COOLER_V_PIN)
{
  int value = param.asInt();
  if (value)
  {
    cooler_control(ON);
    lcd.setCursor(7, 0); 
    lcd.print(" COLR ON ");
  }
  else
  {
    cooler_control(OFF);
    lcd.setCursor(7, 0);   
    lcd.print(" COLR OFF");    
  }
  
}
  
/*To turn ON and OFF heater based virtual PIN value*/
BLYNK_WRITE(HEATER_V_PIN )
{
  heater_sw = param.asInt();
  if (heater_sw)
  //turn on and off the cooler on blynk app
  {
    heater_control(ON);
    lcd.setCursor(7, 0);   
    lcd.print(" HETR ON ");
  }
  else
  {
    heater_control(OFF);
    lcd.setCursor(7, 0);  
    lcd.print(" HETR OFF");
  }
  
}
/*To turn ON and OFF inlet valve based virtual PIN value*/
BLYNK_WRITE(INLET_V_PIN)
{
  inlet_sw= param.asInt();
  if(inlet_sw)
{
    enable_inlet();
    lcd.setCursor(7, 1);  
    lcd.print("INLT ON ");   
}
else
{
    disable_inlet();
    lcd.setCursor(7, 1);  
    lcd.print("INLT OFF"); 
}
}

/*To turn ON and OFF outlet value based virtual switch value*/
BLYNK_WRITE(OUTLET_V_PIN)
{
  outlet_sw= param.asInt();
  if(outlet_sw)
{
    enable_outlet();
    lcd.setCursor(7, 1);  
    lcd.print("OULT ON ");   
}
else
{
    disable_outlet();
    lcd.setCursor(7, 1);  
    lcd.print("OULT OFF"); 
}
}
/*To display temperature and water volume as gauge on the Blynk App*/                
void update_temperature_reading()
{
  // You can send any value at any time.
  // Please don't send more that 10 values per second.
  Blynk.virtualWrite(TEMPERATURE_GAUGE, read_temperature());
  Blynk.virtualWrite(WATER_VOL_GAUGE, volume());
  
}
/*To turn off the heater if the temperature raises above 35 deg C*/
void handle_temp(void)
{
    
//compare temperature with 35 and check if heater is ON
if((read_temperature() > float(35)) && heater_sw) 
{
  heater_sw = 0; 
  heater_control(OFF); 
  lcd.setCursor(7, 0);  
  lcd.print("HETR OFF");
  Blynk.virtualWrite(BLYNK_TERMINAL_V_PIN, "Temperature is above 35 C\n");
  Blynk.virtualWrite(BLYNK_TERMINAL_V_PIN, "So the heater is turned OFF\n");
  Blynk.virtualWrite(HEATER_V_PIN, OFF);
  
  }
}

/*To control water volume above 2000ltrs*/
void handle_tank(void)
{
if((tank_volume < 2000) && (inlet_sw == OFF))
{
  enable_inlet();
  inlet_sw = ON;  
  lcd.setCursor(7, 1);
  lcd.print("INLT ON ");
  Blynk.virtualWrite(BLYNK_TERMINAL_V_PIN, "Water volume is less than 2000\n");
  Blynk.virtualWrite(BLYNK_TERMINAL_V_PIN, "So inlet valve is turned ON\n");
  Blynk.virtualWrite(INLET_V_PIN, ON);  
} 
if((tank_volume == 3000) && (inlet_sw == ON))
{
  disable_inlet();
  inlet_sw = OFF;  
  lcd.setCursor(7, 1);
  lcd.print("INLT OFF");
  Blynk.virtualWrite(BLYNK_TERMINAL_V_PIN, "Water Tank is Full ...\n");
  Blynk.virtualWrite(BLYNK_TERMINAL_V_PIN, "So inlet valve is turned OFF\n");
  Blynk.virtualWrite(INLET_V_PIN, OFF);   
  }   
}

void setup(void)
{
//Initializing LED (Garden Light) as output pin 
  // put your setup code here, to run once: 
/*connecting arduino to blynk server*/
  Blynk.begin(auth);
 /*initialize the lcd*/
 lcd.init();  
 /*turn the backlight */                   
 lcd.backlight();
 /*clear the clcd*/
 lcd.clear();
 /*cursor to the home */
 lcd.home(); 
 lcd.setCursor(0, 0);
 lcd.print("T=");
 lcd.setCursor(0, 1);
 lcd.print("V=");
 
 init_temperature_system();
 init_ldr(); 
 init_serial_tank();
 
 //update teperature on blynk app after .5 seconds
  timer.setInterval(1000L, update_temperature_reading);       
}

void loop(void) 
{
  Blynk.run();
  timer.run();
  String temperature;  
  temperature = String(read_temperature(), 2);
  lcd.setCursor(2, 0);
  lcd.print(temperature);
  tank_volume= volume();
  lcd.setCursor(2, 1);
  lcd.print(tank_volume);
  brightness_control(); 

  handle_temp();
  handle_tank();
  
  pinMode(LED, OUTPUT);        
  
}
